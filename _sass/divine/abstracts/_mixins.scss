// VARIABLES

// Number of breakpoints
$numberof-breakpoints: length($breakpoints);

// Turning maps into lists
$breaks: map-values($breakpoints);
$break-names: map-keys($breakpoints);
$roots: map-values($spreads);


// MEDIA QUERIES

// STATUS: WORKING
// Recommended media query: uses min-width for mobile-first development
@mixin larger-than($break) {
  // Retrieves value from map and converts to ems
  $value: map-get($breakpoints, $break);

  // If the breakpoint exists in the map
  @if $value != null {
    $value-in-ems: em($value);
    // Prints a media query based on the value
    @media screen and (min-width: $value-in-ems) {
      @content;
    }
  }

  // If the breakpoint doesn't exist in the map
  @else {
    @warn "That breakpoint does not exist. Make sure you use one from the breakpoints map in _variables.scss";
  }
}

// want to do @mixin at-breakpoing($break) for specific breakpoints

// Container widths
// STATUS: WORKING BUT NOT COMPLETELY TESTED
$container-list: map-keys($container-widths);

@mixin set-container() {
  @for $i from 1 through $numberof-breakpoints {
    $specific-width-value: map-get($container-widths, nth($container-list, $i));

    @include larger-than(nth($break-names, $i)) {
      @include outer-container($specific-width-value);
    }
  }
}


// RESPONSIVE ROOT SIZES

// STATUS: WORKING
@mixin root-size {
  // Set root font size for smallest screen size
  font-size: nth($roots, 1) / 16 * 100%;

  // Loop through breakpoints and set root font size for each one
  @for $i from 2 through $numberof-breakpoints {
    @media screen and (min-width: nth($breaks, $i) / 16 * 1em) {
      font-size: nth($roots, $i) / 16 * 100%;
    }
  }
}

// FONT SIZES

// STATUS: NOT WORKING
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

// $breaks: map-values($breakpoints);
// $break-names: map-keys($breakpoints);
// $roots: map-values($spreads);
$scale-maps: map-keys($modular-scale);

// STATUS: WORKING for pix values, not for ems

// @include font-size(zeta) -> font size: zeta for all breakpoints
// @include font-size(zeta, m) -> font-size: zeta for break-m and up
// @include font-size(22, l) -> font-size: 22px for break-l and up
@mixin font-size($fontsize, $breakpoint: xs) {
  // variables
  $given-breakpoint: break-#{$breakpoint};
  $given-breakpoint-index: index($break-names, $given-breakpoint);

  // if the fontsize is a number
  @if type-of($fontsize) == number {
    @include larger-than($given-breakpoint) {
      font-size: $fontsize * 1px;
    }
  }
  // if fontsize is a modular scale value
  @else if map-has-key(map-get($modular-scale, scale-xs), $fontsize) {
    // loop through breakpoints >= given breakpoint
    @for $i from $given-breakpoint-index through $numberof-breakpoints {
      $specific-scale-map: nth($scale-maps, $i); // scale-m
      // $fontsize-value: deep-map-get($modular-scale, "#{$specific-scale-map}", "#{$fontsize}"); // 18
      // $fontsize-value: deep-map-get($modular-scale, "scale-m", "zeta");
      $fontsize-value: map-get(map-get($modular-scale, $specific-scale-map), $fontsize); //works, but hacky

      @include larger-than(nth($break-names, $i)) {
        font-size: $fontsize-value * 1px;
      }
    }
  }
  @else {
    @warn "#{$fontsize} is not a valid font size. Please choose either a modular scale value or a pixel value."
  }
};

// Link color
// @include link-color(none) -> no link styling
// @include link-color($primary-color) -> link styling with that color
@mixin establish-link($color, $underline: true) {
  color: $color;
  text-decoration: none;
  transition: $default-transition;

  @if $underline == true {
    position: relative;
    &:before {
      content: "";
      position: absolute;
      width: 100%;
      height: 2px;
      bottom: 1px;
      left: 0;
      background: $color;
      visibility: hidden;
      transform: scaleX(0);
      transition: all 0.2s ease-in-out 0s;
    }
    &:hover, &:active, &:focus {
      transition: all 0.15s ease-out;
      color: $color;
      text-decoration: none;
      &:before {
          visibility: visible;
          transform: scaleX(1);
      }
    }
  }

  @else {
    &:hover {
      color: darken($color, 10%);
    }
  }
}

// Assign given breakpoint
// Loop through breakpoints
// Get scale associated with that breakpoint
// Look up value for given key
// Convert to rems
// Set font size
